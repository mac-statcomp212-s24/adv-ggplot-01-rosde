---
title: "Advanced visualization with ggplot2"
subtitle: "Challenge 1"
author: "Emanuel Deleon Otazu"
format: 
  html:
    self-contained: true
---

# Revision

In my first submission, I did not include the y axis marks at 0, 40, 80, 120 for the Temperature graph and for the precipitation y axis, the labels were not at 4 and 8. On my first attempt, I didn't think that the marks were as relevant, so I didn't pay much attention to it, but while revising it, I realized how these details make the graph look even better.
I learned how the scale_y_continuous and its arguments (labels, limits, expand, etc) works, I knew the general idea of the function but I was not as familiar with how it actually works in practice.
Some optional suggestions were to remove the labels on the x axis on the precipitation graph (which I did), and to change the theme for both plots. I decided to keep the theme_clean() because I didn't like how it looked with other themes, the only issue was that when merging both plots, theme_clean() creates grids/frames, making the graph 'less flowing',if I have this issue in another context, I may used another theme or as a last resource, I would remove those lines on an image editor.




# Setup

```{r}
# Code for loading packages and reading in data
library(tidyverse)
library(ggrepel)
library(ggthemes)
library(ggpubr)
weather <- read_csv("https://lmyint.github.io/212_spring_2024/data/sfo_weather.csv")
```



# Visualization

```{r}
#Wrangling 

month_starts <- weather %>% 
  filter(Day==1, Month != 1)

month_m <- weather %>%
  filter(Day ==15 ) %>%
  pull(dateInYear)

recordHighOnly <-  weather %>%
  filter(RecordP) 

recordHighOnlyT <-  weather %>%
  filter(Record) 

recordHighOnlyP <-  weather %>%
  filter(Day == 28) 

ylimits <-  c(0, 40, 80, 120)


```



```{r}
# Code for recreating the visualization (Temperature)

temp <-  ggplot(weather) +
  geom_linerange(aes(x= dateInYear, ymin = RecordLow, ymax= RecordHigh ), color= "#ECEBE3")+
  geom_linerange(aes(x= dateInYear, ymin = NormalLow, ymax= NormalHigh ),color= "#C8B8BA")+
  geom_linerange(aes(x= dateInYear,  ymin = Low, ymax= High ),color= "#A90248")+
  geom_vline(data= month_starts,  mapping = aes(xintercept = dateInYear ), lty= "dashed")+
  geom_text_repel(aes(x=dateInYear, y= RecordHigh,label= RecordText, check_overlap= TRUE))+
  geom_point(data =recordHighOnlyT, aes(x= dateInYear,  y= RecordHigh),shape= 25, fill= "black")+
  scale_x_continuous(labels = month.abb ,breaks = month_m)+
  scale_y_continuous(labels = c(0, 40, 80, 120), 
                     limits = c(min(ylimits), max(ylimits)),
                     breaks = ylimits,
                     # expand = expansion(add =c(0, 0))
                     )+
  theme_clean()+
  labs(title = "Temperature",
       x= "",
       y= "")
 
  
```

```{r}
# Code for recreating the visualization (Precipitation)
Precip <- weather %>% 
  ggplot(aes(x = dateInYear, y = CulmPrec ))+
  geom_line(aes(x = dateInYear, y = CulmPrec), color= "#32a3d8")+
  geom_area(fill= "#ebeae2")+
  geom_vline(data= month_starts, mapping = aes(xintercept = dateInYear),color= "grey")+
  geom_point(data =recordHighOnly,aes(x= dateInYear,y=CulmPrec ),shape= 25,fill= "black")+
  geom_text_repel(data=recordHighOnlyP, aes(x=dateInYear, y= CulmPrec, label= CulmPrec,
                                          check_overlap= TRUE))+
  # scale_x_continuous(labels = "")+
  scale_y_continuous(labels = c(4, 8), 
                     # limits = c(min(ylimits_precip), max(ylimits_precip)),
                     breaks =  c(4, 8),
                     limits = c(0, 10)
                     # expand = expansion(add =c(0, 0))
                     )+
  labs(title = "Precipitation",
       x= "",
       y="")+
  theme_clean()+
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
```

```{r}
#Final Graph, Temperature and Precipitation 
tempPrecip <- ggarrange(temp, Precip, ncol = 1, nrow = 2, heights = c(2, 1))
  annotate_figure(tempPrecip, top  = "SFO weather in 2011 ")
```

# AI usage

If you use an AI tool (e.g., ChatGPT, Google Bard) to help with this assignment, please paste below the prompts you use and their associated output.

**Prompt:** I have a geom_linerange graph, and I have a variable with record values, how do i make these record values to appear as text on my geom_linerange graph?



**Output:** 

"To add text labels for record values on a geom_linerange plot in ggplot2, you can use the geom_text layer. Here's an example with a modification to include record values as text labels:

- Assuming you have a variable with record values
record_values <- c(25, 30, 35)  # Replace this with your actual record values

- Create the plot with custom y-axis breaks and text label for record values
ggplot(df, aes(x = Date, ymin = 0, ymax = Temperature)) +
  geom_linerange(color = "blue") +
  geom_hline(yintercept = record_high_temperature, linetype = "dashed", color = "red") +
  geom_point(data = df[df$Date == record_high_date, ], aes(shape = "Record High"), size = 3, color = "red") +
  geom_text(data = data.frame(Date = rep(df$Date[1], length(record_values)), RecordValue = record_values),
            aes(x = Date, y = RecordValue, label = paste("Record:", RecordValue), vjust = -0.5), color = "green", size = 3) +  # Text label for record values
  scale_shape_manual(values = 17) +
  theme_minimal() +
  labs(title = "Temperature Trend",
       subtitle = paste("Record High on", format(record_high_date, "%B %d, %Y")),
       x = "Date",
       y = "Custom Y-Axis Label") +
  scale_y_continuous(breaks = c(0, 20, 40))  # Set your custom y-axis breaks here"


Keep in mind that the use of AI has a [huge energy cost](https://lmyint.github.io/212_spring_2024/syllabus.html#artificial-intelligence-ai-use). Please describe an energy-saving activity that you can start engaging in to offset this cost.

**Energy-saving activity:** 






